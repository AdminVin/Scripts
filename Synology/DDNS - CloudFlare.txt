###########################################
## Part 1 - Create Cloud Flare API Token ##
###########################################
# Source: https://github.com/oznu/docker-cloudflare-ddns

1. Go to https://dash.cloudflare.com/profile/api-tokens

2. Create API Token
- Name: cloudflare-ddns
- Permissions
Zone - Zone Settings - Read
Zone - Zone - Read
Zone - DNS - Edit
Set the zone resources to:
Include - All zones

3. Save & Copy the API Token 


#############################################################
## Part 2 - Scheduled Task on Synology ##
#############################################################
1. Create Scheduled Task > User Defined Script
- Name: Cloudflare DDNS
- User: root
- Schedule: As needed (hourly recommended)
- Update 'config' section below
- Copy script below into "User-defined script"


#!/bin/sh

# === CONFIG ===
ZONE_ID="123456789"
RECORD_NAME="DOMAIN.COM"
API_TOKEN="API_SECRET_TOKEN"
LOG_DIR="/volume1/docker/DDNS"

# === GET CURRENT PUBLIC IP ===
IP=$(curl -s https://icanhazip.com)

# === FETCH RECORD ID ===
RECORD_ID=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records?type=A&name=$RECORD_NAME" \
  -H "Authorization: Bearer $API_TOKEN" \
  -H "Content-Type: application/json" | sed -n 's/.*"id":"\([a-z0-9]\{32\}\)".*/\1/p' | head -n 1)

# === GET CURRENT DNS VALUE ===
CURRENT_IP=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records/$RECORD_ID" \
  -H "Authorization: Bearer $API_TOKEN" \
  -H "Content-Type: application/json" | sed -n 's/.*"content":"\([^"]*\)".*/\1/p')

# === SKIP IF IP MATCHES ===
if [ "$IP" = "$CURRENT_IP" ]; then
  exit 0
fi

# === PERFORM UPDATE ===
RESPONSE=$(curl -s -X PUT "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records/$RECORD_ID" \
  -H "Authorization: Bearer $API_TOKEN" \
  -H "Content-Type: application/json" \
  --data "{\"type\":\"A\",\"name\":\"$RECORD_NAME\",\"content\":\"$IP\",\"ttl\":3600,\"proxied\":false}")

# === LOG ONLY IF UPDATED ===
TIMESTAMP=$(date "+%Y-%m-%d_%H-%M")
LOG_FILE="$LOG_DIR/${TIMESTAMP}.txt"

mkdir -p "$LOG_DIR"
{
  echo "[$(date '+%Y-%m-%d %H:%M')] IP changed"
  echo "Old IP: $CURRENT_IP"
  echo "New IP: $IP"
  echo "Record ID: $RECORD_ID"
  echo "Cloudflare response: $(echo $RESPONSE | grep -o '\"success\":[^,}]*')"
} > "$LOG_FILE"

# === CLEANUP OLD LOGS (>365 days) ===
find "$LOG_DIR" -type f -name "*.txt" -mtime +365 -exec rm {} \;
